Tablas:
CREATE TABLE IF NOT EXISTS proveedores
(
    id 					INT AUTO_INCREMENT,
    nombre 			 	VARCHAR(30)  NOT NULL,
    direccion 	        VARCHAR(300) NOT NULL,
    telefono 			VARCHAR(10)  NOT NULL,
    email               VARCHAR(50)  NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS productos
(
    id 					INT AUTO_INCREMENT,
    nombre 			 	VARCHAR(50)  NOT NULL,
    descripcion 	    VARCHAR(300) NOT NULL,
    categoria 			VARCHAR(50)  NOT NULL,
    precio_venta        DECIMAL(10, 2)  NOT NULL,
    unidad				VARCHAR(30) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS usuarios
(
    id 					INT AUTO_INCREMENT,
    nombre_usuario		VARCHAR(50),
    nombre 			 	VARCHAR(30) NOT NULL,
    apellido_paterno 	VARCHAR(30) NOT NULL,
    apellido_materno 	VARCHAR(30) NOT NULL,
    telefono 			VARCHAR(10),
    estado				VARCHAR(30),
    ciudad				VARCHAR(30),
    colonia				VARCHAR(30),
    calle				VARCHAR(30),
    numero				VARCHAR(30),
    pass				VARCHAR(20),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS almacen
(
    id 					INT AUTO_INCREMENT,
    id_producto 		INT NOT NULL,
    cantidad 	    	INT NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS sucursales
(
    id 					INT AUTO_INCREMENT,
    nombre 				VARCHAR(100) NOT NULL,
    direccion 	    	VARCHAR(300) NOT NULL,
    telefono 	    	VARCHAR(10) NOT NULL,
    responsable 	    VARCHAR(100) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS periodo
(
    id 					INT AUTO_INCREMENT,
    fecha 				DATE,
    hora 	    		TIME,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS costos
(
    id 					INT AUTO_INCREMENT,
    id_periodo 			INT NOT NULL,
    concepto 	    	VARCHAR(100) NOT NULL,
    descripcion 	    VARCHAR(300) NOT NULL,
    precio 	    		DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS gastos
(
    id 					INT AUTO_INCREMENT,
    id_periodo 			INT NOT NULL,
    tipo 	    		VARCHAR(100) NOT NULL,
    nombre 	    		VARCHAR(100) NOT NULL,
    descripcion 	    VARCHAR(300) NOT NULL,
    precio 	    		DECIMAL(10, 2) NOT NULL,
    fecha 				DATE NOT NULL,
    PRIMARY KEY (id)
);





Procedimientos almacenados:
1. Procedimiento almacenado para insertar en la tabla proveedores.
DELIMITER //
CREATE PROCEDURE spInsertarProveedor
(
    IN _nombre 		VARCHAR(30), 
    IN _direccion 	VARCHAR(300),  
    IN _telefono 	VARCHAR(10),
    IN _email 		VARCHAR(50)
)
BEGIN
	INSERT INTO proveedores (nombre, direccion, telefono, email)  VALUES
	(_nombre, _direccion, _telefono, _email);
END//
DELIMITER ;

CALL spInsertarProveedor ('Prueba', 'Centro', '5564191682', 'a@algo.com');



2. Procedimiento almacenado para mostrar todos los proveedores.
DELIMITER //
CREATE PROCEDURE spMostrarProveedores
()
BEGIN
	SELECT *
    FROM proveedores;
END//
DELIMITER ;

CALL spMostrarProveedores ();



3. Procedimiento almacenado para actualizar proveedores.
DELIMITER //
CREATE PROCEDURE spActualizarProveedor
(
    IN _id			INT,
    IN _nombre 		VARCHAR(30), 
    IN _direccion 	VARCHAR(300),  
    IN _telefono 	VARCHAR(10),
    IN _email 		VARCHAR(50)
)
BEGIN
	IF _nombre IS NOT NULL THEN
    	UPDATE proveedores 
        SET nombre = _nombre
        WHERE id = _id;
    END IF;
    
	IF _direccion IS NOT NULL THEN
    	UPDATE proveedores 
        SET direccion = _direccion
        WHERE id = _id;
    END IF;

	IF _telefono IS NOT NULL THEN
    	UPDATE proveedores 
        SET telefono = _telefono
        WHERE id = _id;
    END IF;
    
	IF _email IS NOT NULL THEN
    	UPDATE proveedores 
        SET email = _email
        WHERE id = _id;
    END IF;
END//
DELIMITER ;



4. Procedimiento almacenado para eliminar proveedores.
DELIMITER //
CREATE PROCEDURE spEliminarProveedor
(
	IN _id INT
)
BEGIN
	DELETE FROM proveedores WHERE id = _id;
END//
DELIMITER ;



5. Procedimiento almacenado para insertar en la tabla productos.
DELIMITER //
CREATE PROCEDURE spInsertarProducto
(
    IN _nombre 		 VARCHAR(50), 
    IN _descripcion  VARCHAR(300),  
    IN _categoria 	 VARCHAR(50),
    IN _precio_venta DECIMAL(10, 2),
    IN _unidad		 VARCHAR(30)
)
BEGIN
	INSERT INTO productos (nombre, descripcion, categoria, precio_venta, unidad)  VALUES
	(_nombre, _descripcion, _categoria, _precio_venta, _unidad);
END//
DELIMITER ;



6. Procedimiento almacenado para mostrar todos los productos.
DELIMITER //
CREATE PROCEDURE spMostrarProductos
()
BEGIN
	SELECT *
    FROM productos;
END//
DELIMITER ;



7. Procedimiento almacenado para actualizar productos.
DELIMITER //
CREATE PROCEDURE spActualizarProducto
(
    IN _id			 INT,
    IN _nombre 		 VARCHAR(50), 
    IN _descripcion  VARCHAR(300),  
    IN _categoria 	 VARCHAR(50),
    IN _precio_venta DECIMAL(10, 2),
    IN _unidad 		 VARCHAR(30)
)
BEGIN
	IF _nombre IS NOT NULL THEN
    	UPDATE productos 
        SET nombre = _nombre
        WHERE id = _id;
    END IF;
    
	IF _descripcion IS NOT NULL THEN
    	UPDATE productos 
        SET descripcion = _descripcion
        WHERE id = _id;
    END IF;

	IF _categoria IS NOT NULL THEN
    	UPDATE productos 
        SET categoria = _categoria
        WHERE id = _id;
    END IF;
    
	IF _precio_venta IS NOT NULL THEN
    	UPDATE productos 
        SET precio_venta = _precio_venta
        WHERE id = _id;
    END IF;
    
	IF _unidad IS NOT NULL THEN
    	UPDATE productos 
        SET unidad = _unidad
        WHERE id = _id;
    END IF;
END//
DELIMITER ;



8. Procedimiento almacenado para eliminar productos.
DELIMITER //
CREATE PROCEDURE spEliminarProducto
(
	IN _id INT
)
BEGIN
	DELETE FROM productos WHERE id = _id;
END//
DELIMITER ;



9. Procedimiento almacenado para insertar en la tabla usuarios.
DELIMITER //
CREATE PROCEDURE spInsertarUsuario
(
    IN _nombre_usuario	VARCHAR(50), 
    IN _nombre  		VARCHAR(30),  
    IN _ap 	 			VARCHAR(30),
    IN _am 				VARCHAR(30),
    IN _telefono		VARCHAR(10),
    IN _estado			VARCHAR(30),
    IN _ciudad			VARCHAR(30),
    IN _colonia			VARCHAR(30),
    IN _calle			VARCHAR(30),
    IN _numero			VARCHAR(30),
    in _pass			VARCHAR(20)
)
BEGIN
	INSERT INTO usuarios (nombre_usuario, nombre, apellido_paterno, apellido_materno, telefono, estado, ciudad, colonia, calle, numero, pass)  VALUES
	(_nombre_usuario, _nombre, _ap, _am, _telefono, _estado, _ciudad, _colonia, _calle, _numero, _pass);
END//
DELIMITER ;



10. Procedimiento almacenado para mostrar todos los usuarios.
DELIMITER //
CREATE PROCEDURE spMostrarUsuarios
()
BEGIN
	SELECT *
    FROM usuarios;
END//
DELIMITER ;



11. Procedimiento almacenado para actualizar usuarios.
DELIMITER //
CREATE PROCEDURE spActualizarUsuario
(
    IN _id			 	INT,
    IN _nombre_usuario	VARCHAR(50),
    IN _nombre 		 	VARCHAR(30), 
    IN _ap  			VARCHAR(30),
    IN _am  			VARCHAR(30),
    IN _telefono 	 	VARCHAR(10),
    IN _estado 			VARCHAR(30),
    IN _ciudad 		 	VARCHAR(30),
    IN _colonia		 	VARCHAR(30),
    IN _calle 		 	VARCHAR(30),
    IN _numero 		 	VARCHAR(30),
    IN _pass 		 	VARCHAR(20)
)
BEGIN
	IF _nombre_usuario IS NOT NULL THEN
    	UPDATE usuarios 
        SET nombre_usuario = _nombre_usuario
        WHERE id = _id;
    END IF;

	IF _nombre IS NOT NULL THEN
    	UPDATE usuarios 
        SET nombre = _nombre
        WHERE id = _id;
    END IF;
    
	IF _ap IS NOT NULL THEN
    	UPDATE usuarios 
        SET apellido_paterno = _ap
        WHERE id = _id;
    END IF;

	IF _am IS NOT NULL THEN
    	UPDATE usuarios 
        SET apellido_materno = _am
        WHERE id = _id;
    END IF;
    
	IF _telefono IS NOT NULL THEN
    	UPDATE usuarios 
        SET telefono = _telefono
        WHERE id = _id;
    END IF;
    
	IF _estado IS NOT NULL THEN
    	UPDATE usuarios 
        SET estado = _estado
        WHERE id = _id;
    END IF;
    
	IF _ciudad IS NOT NULL THEN
    	UPDATE usuarios 
        SET ciudad = _ciudad
        WHERE id = _id;
    END IF;
    
	IF _colonia IS NOT NULL THEN
    	UPDATE usuarios 
        SET colonia = _colonia
        WHERE id = _id;
    END IF;
    
	IF _calle IS NOT NULL THEN
    	UPDATE usuarios 
        SET calle = _calle
        WHERE id = _id;
    END IF;
    
	IF _numero IS NOT NULL THEN
    	UPDATE usuarios 
        SET numero = _numero
        WHERE id = _id;
    END IF;
    
	IF _pass IS NOT NULL THEN
    	UPDATE usuarios 
        SET pass = _pass
        WHERE id = _id;
    END IF;
END//
DELIMITER ;



12. Procedimiento almacenado para eliminar usuarios.
DELIMITER //
CREATE PROCEDURE spEliminarUsuario
(
	IN _id INT
)
BEGIN
	DELETE FROM usuarios WHERE id = _id;
END//
DELIMITER ;



13. Procedimiento almacenado para insertar en la tabla almacen.
DELIMITER //
CREATE PROCEDURE spInsertarAlmacen
(
    IN nombre_producto 	VARCHAR(50), 
    IN _cantidad  		INT
)
BEGIN
	DECLARE id_p INT;
    DECLARE mensaje	VARCHAR(200);

	IF EXISTS
    (
		SELECT p.nombre
        FROM productos AS p
        WHERE p.nombre = nombre_producto
    ) THEN
		SELECT p.id
        INTO id_p
        FROM productos AS p
        WHERE p.nombre = nombre_producto;
    
		INSERT INTO almacen (id_producto, cantidad)  VALUES
		(id_p, _cantidad);
	ELSE
		SET mensaje = 'El producto seleccionado no existe';
        SELECT mensaje;
	END IF;
END//
DELIMITER ;



13. Procedimiento almacenado para mostrar los productos en el almacen.
DELIMITER //
CREATE PROCEDURE spMostrarAlmacen
()
BEGIN
	SELECT p.id, p.nombre, a.cantidad
	FROM almacen AS a
	JOIN productos AS p ON a.id_producto = p.id
	GROUP BY a.id;
END//
DELIMITER ;